const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder } = require('discord.js');
const Coin = require('../../Schemas.js/coin');
const COOLDOWN_SECONDS = 30 * 60;
const ROB_CHANCE = 0.3;
const ROB_PENALTY = 1000;

module.exports = {
  data: new SlashCommandBuilder()
    .setName('rob')
    .setDescription('–£–∫—Ä–∞—Å—Ç—å ü™≤ —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption((option) =>
      option.setName('user')
        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–∫—Ä–∞—Å—Ç—å ü™≤')
        .setRequired(true)
    ),
  async execute(interaction) {
    const targetUser = interaction.options.getUser('user');
    const userId = interaction.user.id;

    const user = await Coin.findOne({ userId: userId });
    if (!user) {
      return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç ü™≤.', ephemeral: true });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–Ω–µ—Ç –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
    if (user.coins < ROB_PENALTY) {
      return interaction.reply({ content: `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è. –î–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${ROB_PENALTY} ü™≤.`, ephemeral: true });
    }

    const userCooldown = await Coin.findOne({ userId: userId, cooldown: { $gt: Date.now() } });
    if (userCooldown) {
      const remainingTime = (userCooldown.cooldown - Date.now()) / 1000;
      return interaction.reply({ content: `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${remainingTime.toFixed(0)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π —É–∫—Ä–∞—Å—Ç—å ü™≤.`, ephemeral: true });
    }

    // Set the cooldown for the user
    const cooldownTime = Date.now() + (COOLDOWN_SECONDS * 1000);
    await Coin.updateOne({ userId: userId }, { cooldown: cooldownTime }, { upsert: true });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (targetUser.id === interaction.user.id) {
      return interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è ü™≤.', ephemeral: true });
    }

    try {
      const target = await Coin.findOne({ userId: targetUser.id });

      if (!target) {
        return interaction.reply({ content: '–£ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ü™≤.', ephemeral: true });
      }

      // –®–∞–Ω—Å —É–∫—Ä–∞—Å—Ç—å ü™≤ - 30%
      const chance = Math.random();
      const minStolenCoins = Math.floor(ROB_CHANCE * target.coins);
      const maxStolenCoins = Math.floor(0.1 * target.coins);
      const stolenCoins = chance < ROB_CHANCE ? Math.floor(Math.random() * (maxStolenCoins - minStolenCoins + 1)) + minStolenCoins : 0;

      if (stolenCoins > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ü™≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.coins += stolenCoins;
        target.coins -= stolenCoins;
        await user.save();
        await target.save();
        EmbedBuilder
        const embed = new EmbedBuilder()
          .setTitle('–£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ!')
          .setDescription(`–í—ã —É–∫—Ä–∞–ª–∏ ${stolenCoins} ü™≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username}.`)
          .setColor('Green');

        return interaction.reply({ embeds: [embed] });
      } else {
        const embed = new EmbedBuilder()
          .setTitle('–ù–µ—É–¥–∞—á–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ')
          .setDescription(`–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–∫—Ä–∞—Å—Ç—å ü™≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username}. –í–∞—Å –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–ª–∏ –Ω–∞ ${ROB_PENALTY} ü™≤`)
          .setColor('Red');

        user.coins -= ROB_PENALTY;
        await user.save();

        return interaction.reply({ embeds: [embed] });
      }
    } catch (error) {
      console.error(error);
      return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∫—Ä–∞—Å—Ç—å ü™≤.', ephemeral: true });
    }
  },
};
