const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder } = require('discord.js');
const LotteryTickets = require('../../Schemas.js/LotteryTickets');
const LotteryResults = require('../../Schemas.js/LotteryResults');
const Coin = require('../../Schemas.js/coin'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –≥–ª–∞–≤–Ω—É—é –º–æ–¥–µ–ª—å

module.exports = {
    data: new SlashCommandBuilder()
        .setName('drawlottery')
        .setDescription('–ü—Ä–æ–≤–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.'),
    async execute(interaction) {
        try {
            const tickets = await LotteryTickets.find({});
            if (tickets.length === 0) {
                return interaction.reply({ content: '–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', ephemeral: true });
            }

            const totalTickets = tickets.reduce((sum, ticket) => sum + ticket.tickets, 0);
            const prizePool = totalTickets * 10; // –î–æ–ø—É—Å—Ç–∏–º, –∫–∞–∂–¥—ã–π –±–∏–ª–µ—Ç —Å—Ç–æ–∏—Ç 10 –º–æ–Ω–µ—Ç
            const numWinners = Math.min(3, tickets.length); // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const prizePerWinner = Math.floor(prizePool / numWinners);

            const winners = [];
            for (let i = 0; i < numWinners; i++) {
                const randomIndex = Math.floor(Math.random() * tickets.length);
                const winner = tickets[randomIndex];

                if (!winner || !winner.userId) {
                    console.error('Invalid ticket:', winner);
                    continue;
                }

                winners.push(winner.userId);
                tickets.splice(randomIndex, 1);

                // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const user = await Coin.findOne({ userId: winner.userId });
                if (user) {
                    user.coins += prizePerWinner;
                    await user.save();
                } else {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                    const newUser = new Coin({ userId: winner.userId, coins: prizePerWinner });
                    await newUser.save();
                }
            }

            if (winners.length === 0) {
                return interaction.reply({ content: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.', ephemeral: true });
            }

            const newResults = new LotteryResults({
                week: new Date().getTime(),
                winners: winners,
                prize: prizePool,
                date: new Date()
            });
            await newResults.save();

            await LotteryTickets.deleteMany({});

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            const winnerMentions = winners.map(winnerId => `<@${winnerId}>`).join(', ');
            const embed = new EmbedBuilder()
                .setTitle('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏')
                .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winnerMentions}!`)
                .addFields(
                    { name: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥', value: `${prizePool} ü™≤`, inline: true },
                    { name: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏', value: winners.map(winnerId => `<@${winnerId}> –ø–æ–ª—É—á–∏–ª ${prizePerWinner} ü™≤`).join('\n'), inline: true }
                )
                .setColor('#3D4C8D') // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
                .setTimestamp();

            return interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏:', error);
            return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏.', ephemeral: true });
        }
    }
};
