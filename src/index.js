const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField, Permissions, MessageManager, Embed, Collection, ActivityType, SelectMenuBuilder, ActionRowBuilder, ButtonBuilder, Events, Intents, ModalBuilder, TextInputBuilder, TextInputStyle, ButtonStyle, InteractionType } = require(`discord.js`);
const fs = require('fs');
const cron = require('node-cron');
const Coin = require('./Schemas.js/coin');
const { Product } = require('./Schemas.js/Models');
const Gift = require('./Schemas.js/Gift');


const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessageReactions] });
const prefix = ';';

// –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–∑ –ø–∞–ø–∫–∏ commands
const commandFiles = fs.readdirSync('./src/commands').filter(file => file.endsWith('.js'));

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
for (const file of commandFiles) {
  const command = require(`./src/commands/${file}`);
  client.commands.set(command.data.name, command);
}


client.commands = new Collection();

require('dotenv').config();

const functions = fs.readdirSync("./src/functions").filter(file => file.endsWith(".js"));
const eventFiles = fs.readdirSync("./src/events").filter(file => file.endsWith(".js"));
const commandFolders = fs.readdirSync("./src/commands");

const process = require('node:process');

process.on('unhandledRejection', async (reason, promise) => {
  console.log('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑:', promise, '–ü—Ä–∏—á–∏–Ω–∞:', reason);
});

process.on('uncaughtException', (err) => {
  console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err)
});

process.on('uncaughtExceptionMonitor', (err, origin) => {
  console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä', err, origin)
});

(async () => {
  for (file of functions) {
    require(`./functions/${file}`)(client);
  }
  client.handleEvents(eventFiles, "./src/events");
  client.handleCommands(commandFolders, "./src/commands");
  client.login(process.env.token)
})();

client.on('ready', async () => {
  console.log('–ë–æ—Ç –≤ —Å–µ—Ç–∏!');

  client.user.setActivity({
    name: 'Larva Games',
    type: ActivityType.Watching
  });

})



client.on('messageCreate', async (message) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ –æ—Ç –±–æ—Ç–∞
  if (message.author.bot) return;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ü™≤ –æ—Ç 1 –¥–æ 10
  const coinsToAdd = Math.floor(Math.random() * 10) + 1;

  try {
    let user = await Coin.findOne({ userId: message.author.id });

    if (!user) {
      user = new Coin({ userId: message.author.id, coins: 0 });
    }

    user.coins += coinsToAdd;
    await user.save();

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.author.tag} –ø–æ–ª—É—á–∏–ª ${coinsToAdd} ü™≤. –í—Å–µ–≥–æ ü™≤ ${user.coins}`);
  } catch (error) {
    console.error(error);
  }
});

/*
client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === 'create_custom_role') {
      const authorId = interaction.user.id;

      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–≤–µ—Ç–∞ —Ä–æ–ª–∏
      const modal = new ModalBuilder()
        .setTitle('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏')
        .setCustomId(`create_custom_role_modal-${authorId}`);

      const role_name = new TextInputBuilder()
        .setCustomId('role_name')
        .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏')
        .setPlaceholder('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏')
        .setRequired(true)
        .setMinLength(1)
        .setMaxLength(32)
        .setStyle(TextInputStyle.Short);

      const role_color = new TextInputBuilder()
        .setCustomId('role_color')
        .setLabel('–¶–≤–µ—Ç —Ä–æ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (#ffffff)')
        .setPlaceholder('–ù–∞–ø—Ä–∏–º–µ—Ä: #ff0000')
        .setRequired(true)
        .setMinLength(7)
        .setMaxLength(7)
        .setStyle(TextInputStyle.Short);

      const roleNameRow = new ActionRowBuilder().addComponents(role_name);
      const roleColorRow = new ActionRowBuilder().addComponents(role_color);

      modal.addComponents(roleNameRow, roleColorRow);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      await interaction.showModal(modal);

      const response = await interaction.awaitModalSubmit({ time: 300000 });
      const roleNameInput = response.fields.getTextInputValue("role_name");
      const roleColorInput = response.fields.getTextInputValue("role_color");


      await Coin.findOneAndUpdate({ userId: authorId }, { roleName: roleNameInput, roleColor: roleColorInput });

      await response.deferUpdate();

      const confirmButton = new ButtonBuilder()
        .setCustomId('confirm_role')
        .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
        .setStyle(ButtonStyle.Success);

      const row = new ActionRowBuilder().addComponents(confirmButton);

      const embed = new EmbedBuilder()
        .setColor(`${roleColorInput}`)
        .setTitle(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç—É –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å –∑–∞ 100000ü™≤?`)
        .addFields(
          { name: "–ù–∞–∑–≤–∞–Ω–∏–µ", value: roleNameInput },
          { name: "–¶–≤–µ—Ç", value: roleColorInput },
        )
        .setTimestamp()

      await interaction.followUp({ embeds: [embed], components: [row], ephemeral: true });
    }
  }
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton()) {
    // If the user clicked the "confirm_role" button
    if (interaction.customId === 'confirm_role') {
      const authorId = interaction.user.id;

      // Find the user in the database by their ID
      const user = await Coin.findOne({ userId: authorId });

      // Check if the user has enough coins (at least 5000)
      if (!user || user.coins < 100000) {
        return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏.', ephemeral: true });
      }

      // Find the role with the same name on the server
      const existingRole = interaction.guild.roles.cache.find(role => role.name === user.roleName);

      if (existingRole) {
        // Notify the user that the role already exists
        await interaction.reply({ content: `–†–æ–ª—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${user.roleName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`, ephemeral: true });
      } else {
        // Create a new role with the specified data
        const newRole = await interaction.guild.roles.create({
          name: user.roleName,
          color: user.roleColor,
        });

        // Give the role to the user
        await interaction.member.roles.add(newRole);

        const expirationTimeInMinutes = 43200; // Set the desired time in minutes
        const expirationTimeInMillis = expirationTimeInMinutes * 60000;

        // Calculate the expiration date for the role
        const expirationDate = new Date(Date.now() + expirationTimeInMillis);

        // Set the expiration date in the user's document
        user.roleExpiration = expirationDate;
        await user.save();

        // Deduct 5000 coins from the user's balance
        user.coins -= 100000;
        await user.save();

        // Send a message to the user about the successful purchase
        await interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å –∑–∞ 5000 –º–æ–Ω–µ—Ç.`, ephemeral: true });

        cron.schedule('* * * * *', async () => {
          try {
            const users = await Coin.find({ roleExpiration: { $lt: new Date() } });

            for (const user of users) {
              const guild = client.guilds.cache.get('1096364345002315779');
              const member = guild.members.cache.get(user.userId);

              if (!member) {
                console.log(`Member with ID ${user.userId} not found in the guild.`);
                // Remove the role from the database if the member is not found in the guild
                await Coin.deleteOne({ userId: user.userId });
                continue;
              }

              const existingRole = guild.roles.cache.find(role => role.name === user.roleName);

              if (existingRole) {
                const requiredCoins = 1200; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–æ–ª–∏

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ä–æ–ª–∏
                if (user.coins >= requiredCoins) {
                  // –ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
                  const expirationTimeInMinutes = 43200; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                  const expirationTimeInMillis = expirationTimeInMinutes * 60000;
                  const newExpirationDate = new Date(Date.now() + expirationTimeInMillis);

                  // –ü—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  await member.roles.add(existingRole);

                  // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                  user.roleExpiration = newExpirationDate;
                  await user.save();

                  // –°–ø–∏—Å–∞—Ç—å 1200 –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  user.coins -= requiredCoins;
                  await user.save();
                } else {
                  console.log(`User with ID ${user.userId} doesn't have enough coins to extend the role.`);
                  // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
                  await Coin.deleteOne({ userId: user.userId });
                  await member.roles.remove(existingRole);
                }
              } else {
                console.log(`Role with name "${user.roleName}" not found on the server.`);
                // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                await Coin.deleteOne({ userId: user.userId });
              }
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', error);
          }
        });


      }
    }
  }
});
*/
client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand() && !interaction.isButton()) return;

  const { commandName, customId } = interaction;

  if (commandName === 'claimgift' && interaction.isButton()) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    if (!(interaction instanceof MessageButtonInteraction)) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–æ–¥–∞—Ä–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userId = interaction.user.id;
    const user = await Coin.findOne({ userId });

    if (!user || user.claimedUsers.includes(userId)) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø–æ–¥–∞—Ä–æ–∫
      await interaction.reply({ content: '–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫.', ephemeral: true });
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫
      user.claimedUsers.push(userId);
      user.coins += user.giftAmount;
      await user.save();

      const remainingReceivers = user.giftReceivers - 1;

      const embed = new EmbedBuilder()
        .setTitle(interaction.options.getString('title'))
        .setDescription(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${user.giftAmount} –º–æ–Ω–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${remainingReceivers}.`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —ç–º–±–µ–¥–µ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      interaction.message.edit({ embeds: [embed], components: [interaction.message.components[0].components[0].setDisabled(remainingReceivers === 0)] });
      await interaction.reply({ content: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!', ephemeral: true });
    }
  }
});

client.on(Events.InteractionCreate, async interaction => {
  if (!interaction.isButton()) return;

  const [action, productId] = interaction.customId.split('_');

  if (action === 'buy') {
    try {
      const product = await Product.findById(productId);
      if (!product) {
        return interaction.reply({ content: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      const stock = product.promocodes.length;
      if (stock === 0) {
        return interaction.reply({ content: '–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.', ephemeral: true });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = interaction.user.id;
      const userCoin = await Coin.findOne({ userId });
      if (!userCoin || userCoin.coins < product.price) {
        return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.', ephemeral: true });
      }

      // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userCoin.coins -= product.price;
      await userCoin.save();

      // –ü—Ä–æ–º–æ–∫–æ–¥
      const promocode = product.promocodes.shift();
      await product.save();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await interaction.user.send(`–í—ã –∫—É–ø–∏–ª–∏ **${product.name}**. –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: \`${promocode}\``);

      // –û—Ç–≤–µ—Ç –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      await interaction.reply({ content: '–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', ephemeral: true });
    } catch (error) {
      console.error('Error processing purchase:', error);
      await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞.', ephemeral: true });
    }
  }
});


client.on('interactionCreate', async interaction => {
  if (interaction.isCommand()) {
    const command = client.commands.get(interaction.commandName);

    if (!command) return;

    try {
      await command.execute(interaction);
    } catch (error) {
      console.error(error);
      //await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
    }
  } else if (interaction.isButton()) {
    const customId = interaction.customId;

    if (customId.startsWith('claim-gift-')) {
      const giftId = customId.split('claim-gift-')[1];
      const userId = interaction.user.id;

      try {
        const gift = await Gift.findOne({ giftId });

        if (!gift) {
          return interaction.reply({ content: '–ü–æ–¥–∞—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.', ephemeral: true });
        }

        if (gift.claimedUsers.includes(userId)) {
          return interaction.reply({ content: '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫.', ephemeral: true });
        }

        if (gift.claimedUsers.length >= gift.receivers) {
          return interaction.reply({ content: '–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã.', ephemeral: true });
        }

        gift.claimedUsers.push(userId);
        await gift.save();

        let receiver = await Coin.findOne({ userId: userId });

        if (!receiver) {
          receiver = new Coin({ userId: userId, coins: gift.amount });
        } else {
          receiver.coins += gift.amount;
        }

        await receiver.save();

        const remainingReceivers = gift.receivers - gift.claimedUsers.length;
        const giftEmbed = new EmbedBuilder()
          .setTitle('üéÅ –ü–æ–¥–∞—Ä–æ–∫!')
          .setDescription(`–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ${gift.amount} ü™≤. –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: ${remainingReceivers}`)
          .setColor('#3D4C8D')
          .setTimestamp();

        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`claim-gift-${giftId}`)
              .setLabel('–ü–æ–ª—É—á–∏—Ç—å ü™≤')
              .setStyle(ButtonStyle.Primary)
              .setDisabled(remainingReceivers === 0)
          );

        await interaction.update({ embeds: [giftEmbed], components: [row] });

        return interaction.followUp({ content: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${gift.amount} ü™≤!`, ephemeral: true });
      } catch (error) {
        console.error(error);
        return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞.', ephemeral: true });
      }
    }
  }
});


client.on('interactionCreate', async interaction => {
  if (interaction.isCommand()) {
    const command = client.commands.get(interaction.commandName);

    if (!command) return;

    try {
      await command.execute(interaction, client);
    } catch (error) {
      console.error(error);
      await interaction.reply({ content: 'There was an error executing that command!', ephemeral: true });
    }
  } else if (interaction.isButton()) {
    const customId = interaction.customId;

    if (customId.startsWith('accept_') || customId.startsWith('decline_')) {
      // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
      const [action, proposerId, targetId] = customId.split('_');

      if (interaction.user.id !== targetId) {
        return interaction.reply({ content: '–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å.', ephemeral: true });
      }

      const proposer = await client.users.fetch(proposerId);
      const target = await client.users.fetch(targetId);

      if (action === 'accept') {
        await Coin.updateOne({ userId: proposerId }, { partnerId: targetId });
        await Coin.updateOne({ userId: targetId }, { partnerId: proposerId });

        await interaction.reply({ content: `${proposer} –∏ ${target} —Ç–µ–ø–µ—Ä—å –∂–µ–Ω–∞—Ç—ã! üéâ` });
      } else if (action === 'decline') {
        await interaction.reply({ content: `${target} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${proposer}.` });
      }
    }
  }
});